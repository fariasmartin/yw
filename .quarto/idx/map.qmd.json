{"title":"Encuentra tu centro de Yoga","markdown":{"yaml":{"title":"Encuentra tu centro de Yoga","format":{"html":{"toc":false}}},"headingText":"Mejorar aparienia de menu de estilos","containsRefs":false,"markdown":"\n\n<link href=\"https://fonts.googleapis.com/css2?family=Savate&display=swap\" rel=\"stylesheet\">\n\n<style>\n  body {\n    font-family: 'Savate', sans-serif;\n    margin: 2em;\n  }\n\n  .layout {\n    display: flex;\n    gap: 2em;\n    align-items: flex-start;\n  }\n\n  .sidebar {\n    flex: 0 0 300px;\n  }\n\n  .main {\n    flex: 1;\n  }\n\n  label {\n    display: block;\n    margin-bottom: 0.3em;\n  }\n\n\n  #styleCheckboxes::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  #styleCheckboxes::-webkit-scrollbar-thumb {\n    background-color: #888;\n    border-radius: 4px;\n  }\n\n  #styleCheckboxes::-webkit-scrollbar-thumb:hover {\n    background-color: #555;\n  }\n\n\n\n</style>\n\n```{=html}\n<div class=\"layout\">\n\n  <div class=\"sidebar\">\n    <h2>Filtrar por</h2>\n\n    <button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">Cerca de m√≠</button>\n\n    <input type=\"text\" id=\"citySearch\" placeholder=\"Buscar centros en mi ciudad\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n    <ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n\n    <div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n      <strong>Estilos de yoga</strong><br />\n      <div id=\"styleCheckboxes\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 0.5em;\"></div>\n    </div>\n\n    \n    <!-- <details open style=\"margin-bottom: 1em;\">\n  <summary><strong>Estilos de yoga</strong></summary>\n  <div id=\"styleCheckboxes\" style=\"\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 0.5em;\n    margin-top: 0.5em;\n    max-height: 250px;\n    overflow-y: auto;\n    border: 1px solid #ccc;\n    padding: 0.5em;\n  \"></div>\n</details> -->\n\n\n\n\n    <div style=\"margin-bottom: 1em;\">\n      <strong>Profesores</strong><br />\n      <select id=\"professorSelect\" style=\"width: 100%; padding: 10px;\">\n        <option value=\"\">Todos los profesores</option>\n      </select>\n    </div>\n\n    <div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n      <strong>Idiomas</strong><br />\n      <label><input type=\"checkbox\" value=\"Spanish\"> Espa√±ol</label>\n      <label><input type=\"checkbox\" value=\"English\"> Ingl√©s</label>\n    </div>\n\n    \n\n  </div>\n\n  <div class=\"main\">\n    <div id=\"map\" style=\"height: 600px; margin-bottom: 1em;\"></div>\n    <h2>Centros de Yoga</h2>\n    <ul id=\"centerList\"></ul>\n    <p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n  </div>\n\n</div>\n```\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nlet checkboxes = []; // Will be populated dynamically\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n\n  if (doZoom && usingNearby && userLat && userLng) {\n    map.setView([userLat, userLng], 14);\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n\n      // Clear city input when nearby search is activated\n      input.value = \"\";\n      findNearbyBtn.textContent = \"‚úÖ Mostrando centros cerca de m√≠\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"Cerca de m√≠\";\n    updateDisplay(true, true);\n  }\n});\n\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  })\n  .then(() => {\n  return fetch(\"data/styles.json\");\n})\n.then(res => res.json())\n.then(styles => {\n  const container = document.getElementById(\"styleCheckboxes\");\n  styles.forEach(style => {\n    const label = document.createElement(\"label\");\n    label.innerHTML = `<input type=\"checkbox\" value=\"${style}\"> ${style}`;\n    container.appendChild(label);\n  });\n\n  // Reassign checkboxes variable now that they exist\n  checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\n  checkboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\n\n  // Also re-run URL params logic in case styles are pre-selected\n  const stylesParam = new URLSearchParams(window.location.search).get(\"styles\");\n  if (stylesParam) {\n    const styleValues = stylesParam.split(\",\");\n    checkboxes.forEach(cb => {\n      cb.checked = styleValues.includes(cb.value);\n    });\n  }\n\n  updateDisplay(true, true);\n});\n\n\n\n\n\ninput.addEventListener(\"focus\", () => {\n\n  suggestions.innerHTML = \"\";\n\n\n  // Boton p√†ra buscar centros cerca de mi en la barra de ciudades\n  // const li = document.createElement(\"li\");\n  // li.textContent = \"üìç Use my location (2 km)\";\n  // li.style.padding = \"5px\";\n  // li.style.cursor = \"pointer\";\n  // li.style.fontStyle = \"italic\";\n  // li.addEventListener(\"click\", () => {\n  //   suggestions.style.display = \"none\";\n  //   findNearbyBtn.click();\n  // });\n  // suggestions.appendChild(li);\n\n    // Inside both focus and input event handlers (after nearMe block)\n  const showAll = document.createElement(\"li\");\n  showAll.textContent = \"Todas las ciudades\";\n  showAll.style.padding = \"5px\";\n  showAll.style.cursor = \"pointer\";\n  showAll.style.fontStyle = \"italic\";\n  showAll.addEventListener(\"click\", () => {\n  usingNearby = false;\n  userLat = null;\n  userLng = null;\n  input.value = \"\";\n  suggestions.style.display = \"none\";\n  findNearbyBtn.textContent = \"Cerca de m√≠\";\n  map.setView([40.0, -3.7], 6); // Reset to default view\n  updateDisplay(true, true);\n  });\n  suggestions.appendChild(showAll);\n\n  \n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n// Boton p√†ra buscar centros cerca de mi en la barra de ciudades\n\n  // const nearMe = document.createElement(\"li\");\n  // nearMe.textContent = \"üìç Use my location (2 km)\";\n  // nearMe.style.padding = \"5px\";\n  // nearMe.style.cursor = \"pointer\";\n  // nearMe.style.fontStyle = \"italic\";\n  // nearMe.addEventListener(\"click\", () => {\n  //   suggestions.style.display = \"none\";\n  //   findNearbyBtn.click();\n  // });\n  // suggestions.appendChild(nearMe);\n\n\n\n\n  // Inside both focus and input event handlers (after nearMe block)\n  const showAll = document.createElement(\"li\");\n  showAll.textContent = \"Toas las ciudades\";\n  showAll.style.padding = \"5px\";\n  showAll.style.cursor = \"pointer\";\n  showAll.style.fontStyle = \"italic\";\n  showAll.addEventListener(\"click\", () => {\n  usingNearby = false;\n  userLat = null;\n  userLng = null;\n  input.value = \"\";\n  suggestions.style.display = \"none\";\n  findNearbyBtn.textContent = \"Cerca de m√≠\";\n  map.setView([40.0, -3.7], 6); // Reset to default view\n  updateDisplay(true, true);\n  });\n  suggestions.appendChild(showAll);\n\n\n\n\n\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        usingNearby = false;\n        userLat = null;\n        userLng = null;\n        findNearbyBtn.textContent = \"Cerca de m√≠\";\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, true);\n      });\n\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n\n\n// Read URL parameters on page load\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // City\n  const cityParam = urlParams.get(\"city\");\n  if (cityParam) {\n    input.value = cityParam;\n  }\n\n  // Yoga styles (comma-separated)\n  const stylesParam = urlParams.get(\"styles\");\n  if (stylesParam) {\n    const styleValues = stylesParam.split(\",\");\n    checkboxes.forEach(cb => {\n      cb.checked = styleValues.includes(cb.value);\n    });\n  }\n\n  // Languages (comma-separated)\n  const langsParam = urlParams.get(\"langs\");\n  if (langsParam) {\n    const langValues = langsParam.split(\",\");\n    languageBoxes.forEach(cb => {\n      cb.checked = langValues.includes(cb.value);\n    });\n  }\n\n  // Professor (exact id)\n  const profParam = urlParams.get(\"prof\");\n  if (profParam) {\n    professorSelect.value = profParam;\n  }\n\n  // Nearby search\n  const nearbyParam = urlParams.get(\"nearby\");\n  if (nearbyParam === \"1\") {\n    findNearbyBtn.click();\n  } else {\n    updateDisplay(true, true);\n  }\n});\n\n\n\n</script>\n\n","srcMarkdownNoYaml":"\n\n<link href=\"https://fonts.googleapis.com/css2?family=Savate&display=swap\" rel=\"stylesheet\">\n\n<style>\n  body {\n    font-family: 'Savate', sans-serif;\n    margin: 2em;\n  }\n\n  .layout {\n    display: flex;\n    gap: 2em;\n    align-items: flex-start;\n  }\n\n  .sidebar {\n    flex: 0 0 300px;\n  }\n\n  .main {\n    flex: 1;\n  }\n\n  label {\n    display: block;\n    margin-bottom: 0.3em;\n  }\n\n\n# Mejorar aparienia de menu de estilos\n  #styleCheckboxes::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  #styleCheckboxes::-webkit-scrollbar-thumb {\n    background-color: #888;\n    border-radius: 4px;\n  }\n\n  #styleCheckboxes::-webkit-scrollbar-thumb:hover {\n    background-color: #555;\n  }\n\n\n\n</style>\n\n```{=html}\n<div class=\"layout\">\n\n  <div class=\"sidebar\">\n    <h2>Filtrar por</h2>\n\n    <button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">Cerca de m√≠</button>\n\n    <input type=\"text\" id=\"citySearch\" placeholder=\"Buscar centros en mi ciudad\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n    <ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n\n    <div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n      <strong>Estilos de yoga</strong><br />\n      <div id=\"styleCheckboxes\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 0.5em;\"></div>\n    </div>\n\n    \n    <!-- <details open style=\"margin-bottom: 1em;\">\n  <summary><strong>Estilos de yoga</strong></summary>\n  <div id=\"styleCheckboxes\" style=\"\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 0.5em;\n    margin-top: 0.5em;\n    max-height: 250px;\n    overflow-y: auto;\n    border: 1px solid #ccc;\n    padding: 0.5em;\n  \"></div>\n</details> -->\n\n\n\n\n    <div style=\"margin-bottom: 1em;\">\n      <strong>Profesores</strong><br />\n      <select id=\"professorSelect\" style=\"width: 100%; padding: 10px;\">\n        <option value=\"\">Todos los profesores</option>\n      </select>\n    </div>\n\n    <div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n      <strong>Idiomas</strong><br />\n      <label><input type=\"checkbox\" value=\"Spanish\"> Espa√±ol</label>\n      <label><input type=\"checkbox\" value=\"English\"> Ingl√©s</label>\n    </div>\n\n    \n\n  </div>\n\n  <div class=\"main\">\n    <div id=\"map\" style=\"height: 600px; margin-bottom: 1em;\"></div>\n    <h2>Centros de Yoga</h2>\n    <ul id=\"centerList\"></ul>\n    <p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n  </div>\n\n</div>\n```\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nlet checkboxes = []; // Will be populated dynamically\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n\n  if (doZoom && usingNearby && userLat && userLng) {\n    map.setView([userLat, userLng], 14);\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n\n      // Clear city input when nearby search is activated\n      input.value = \"\";\n      findNearbyBtn.textContent = \"‚úÖ Mostrando centros cerca de m√≠\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"Cerca de m√≠\";\n    updateDisplay(true, true);\n  }\n});\n\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  })\n  .then(() => {\n  return fetch(\"data/styles.json\");\n})\n.then(res => res.json())\n.then(styles => {\n  const container = document.getElementById(\"styleCheckboxes\");\n  styles.forEach(style => {\n    const label = document.createElement(\"label\");\n    label.innerHTML = `<input type=\"checkbox\" value=\"${style}\"> ${style}`;\n    container.appendChild(label);\n  });\n\n  // Reassign checkboxes variable now that they exist\n  checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\n  checkboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\n\n  // Also re-run URL params logic in case styles are pre-selected\n  const stylesParam = new URLSearchParams(window.location.search).get(\"styles\");\n  if (stylesParam) {\n    const styleValues = stylesParam.split(\",\");\n    checkboxes.forEach(cb => {\n      cb.checked = styleValues.includes(cb.value);\n    });\n  }\n\n  updateDisplay(true, true);\n});\n\n\n\n\n\ninput.addEventListener(\"focus\", () => {\n\n  suggestions.innerHTML = \"\";\n\n\n  // Boton p√†ra buscar centros cerca de mi en la barra de ciudades\n  // const li = document.createElement(\"li\");\n  // li.textContent = \"üìç Use my location (2 km)\";\n  // li.style.padding = \"5px\";\n  // li.style.cursor = \"pointer\";\n  // li.style.fontStyle = \"italic\";\n  // li.addEventListener(\"click\", () => {\n  //   suggestions.style.display = \"none\";\n  //   findNearbyBtn.click();\n  // });\n  // suggestions.appendChild(li);\n\n    // Inside both focus and input event handlers (after nearMe block)\n  const showAll = document.createElement(\"li\");\n  showAll.textContent = \"Todas las ciudades\";\n  showAll.style.padding = \"5px\";\n  showAll.style.cursor = \"pointer\";\n  showAll.style.fontStyle = \"italic\";\n  showAll.addEventListener(\"click\", () => {\n  usingNearby = false;\n  userLat = null;\n  userLng = null;\n  input.value = \"\";\n  suggestions.style.display = \"none\";\n  findNearbyBtn.textContent = \"Cerca de m√≠\";\n  map.setView([40.0, -3.7], 6); // Reset to default view\n  updateDisplay(true, true);\n  });\n  suggestions.appendChild(showAll);\n\n  \n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n// Boton p√†ra buscar centros cerca de mi en la barra de ciudades\n\n  // const nearMe = document.createElement(\"li\");\n  // nearMe.textContent = \"üìç Use my location (2 km)\";\n  // nearMe.style.padding = \"5px\";\n  // nearMe.style.cursor = \"pointer\";\n  // nearMe.style.fontStyle = \"italic\";\n  // nearMe.addEventListener(\"click\", () => {\n  //   suggestions.style.display = \"none\";\n  //   findNearbyBtn.click();\n  // });\n  // suggestions.appendChild(nearMe);\n\n\n\n\n  // Inside both focus and input event handlers (after nearMe block)\n  const showAll = document.createElement(\"li\");\n  showAll.textContent = \"Toas las ciudades\";\n  showAll.style.padding = \"5px\";\n  showAll.style.cursor = \"pointer\";\n  showAll.style.fontStyle = \"italic\";\n  showAll.addEventListener(\"click\", () => {\n  usingNearby = false;\n  userLat = null;\n  userLng = null;\n  input.value = \"\";\n  suggestions.style.display = \"none\";\n  findNearbyBtn.textContent = \"Cerca de m√≠\";\n  map.setView([40.0, -3.7], 6); // Reset to default view\n  updateDisplay(true, true);\n  });\n  suggestions.appendChild(showAll);\n\n\n\n\n\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        usingNearby = false;\n        userLat = null;\n        userLng = null;\n        findNearbyBtn.textContent = \"Cerca de m√≠\";\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, true);\n      });\n\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n\n\n// Read URL parameters on page load\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // City\n  const cityParam = urlParams.get(\"city\");\n  if (cityParam) {\n    input.value = cityParam;\n  }\n\n  // Yoga styles (comma-separated)\n  const stylesParam = urlParams.get(\"styles\");\n  if (stylesParam) {\n    const styleValues = stylesParam.split(\",\");\n    checkboxes.forEach(cb => {\n      cb.checked = styleValues.includes(cb.value);\n    });\n  }\n\n  // Languages (comma-separated)\n  const langsParam = urlParams.get(\"langs\");\n  if (langsParam) {\n    const langValues = langsParam.split(\",\");\n    languageBoxes.forEach(cb => {\n      cb.checked = langValues.includes(cb.value);\n    });\n  }\n\n  // Professor (exact id)\n  const profParam = urlParams.get(\"prof\");\n  if (profParam) {\n    professorSelect.value = profParam;\n  }\n\n  // Nearby search\n  const nearbyParam = urlParams.get(\"nearby\");\n  if (nearbyParam === \"1\") {\n    findNearbyBtn.click();\n  } else {\n    updateDisplay(true, true);\n  }\n});\n\n\n\n</script>\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":false,"output-file":"map.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","resources":["data/centers.json","data/professors.json","data/styles.json"],"theme":"flatly","title":"Encuentra tu centro de Yoga"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}