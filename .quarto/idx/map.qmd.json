{"title":"Find a Yoga Center","markdown":{"yaml":{"title":"Find a Yoga Center"},"headingText":"Filter by City, Yoga Style, Professor, and Language","containsRefs":false,"markdown":"\n\n\n<input type=\"text\" id=\"citySearch\" placeholder=\"Enter city name...\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n<ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n<div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Hatha\"> Hatha</label>\n  <label><input type=\"checkbox\" value=\"Vinyasa\"> Vinyasa</label>\n  <label><input type=\"checkbox\" value=\"Yin\"> Yin</label>\n  <label><input type=\"checkbox\" value=\"Ashtanga\"> Ashtanga</label>\n  <label><input type=\"checkbox\" value=\"Kundalini\"> Kundalini</label>\n  <label><input type=\"checkbox\" value=\"Restorative\"> Restorative</label>\n  <label><input type=\"checkbox\" value=\"Bikram\"> Bikram</label>\n</div>\n\n<select id=\"professorSelect\" style=\"width: 100%; padding: 10px; margin-bottom: 1em;\">\n  <option value=\"\">All Professors</option>\n</select>\n\n<div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Spanish\"> Spanish</label>\n  <label><input type=\"checkbox\" value=\"English\"> English</label>\n</div>\n\n<button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">üìç Find Centers Near Me (2 km)</button>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px;\"></div>\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n## Yoga Centers\n\n<ul id=\"centerList\"></ul>\n<p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nconst checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n\n  if (doZoom && usingNearby && userLat && userLng) {\n    map.setView([userLat, userLng], 14);\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n\n      // Clear city input when nearby search is activated\n      input.value = \"\";\n      findNearbyBtn.textContent = \"‚úÖ Showing Centers Near Me (2 km)\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n    updateDisplay(true, true);\n  }\n});\n\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  });\n\ninput.addEventListener(\"focus\", () => {\n  suggestions.innerHTML = \"\";\n  const li = document.createElement(\"li\");\n  li.textContent = \"üìç Use my location (2 km)\";\n  li.style.padding = \"5px\";\n  li.style.cursor = \"pointer\";\n  li.style.fontStyle = \"italic\";\n  li.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(li);\n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n  const nearMe = document.createElement(\"li\");\n  nearMe.textContent = \"üìç Use my location (2 km)\";\n  nearMe.style.padding = \"5px\";\n  nearMe.style.cursor = \"pointer\";\n  nearMe.style.fontStyle = \"italic\";\n  nearMe.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(nearMe);\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        usingNearby = false;\n        userLat = null;\n        userLng = null;\n        findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, true);\n      });\n\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n</script>\n\n\n<!-- ---\ntitle: \"Find a Yoga Center\"\n---\n\n## Filter by City, Yoga Style, Professor, and Language\n\n<input type=\"text\" id=\"citySearch\" placeholder=\"Enter city name...\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n<ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n<div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Hatha\"> Hatha</label>\n  <label><input type=\"checkbox\" value=\"Vinyasa\"> Vinyasa</label>\n  <label><input type=\"checkbox\" value=\"Yin\"> Yin</label>\n  <label><input type=\"checkbox\" value=\"Ashtanga\"> Ashtanga</label>\n  <label><input type=\"checkbox\" value=\"Kundalini\"> Kundalini</label>\n  <label><input type=\"checkbox\" value=\"Restorative\"> Restorative</label>\n  <label><input type=\"checkbox\" value=\"Bikram\"> Bikram</label>\n</div>\n\n<select id=\"professorSelect\" style=\"width: 100%; padding: 10px; margin-bottom: 1em;\">\n  <option value=\"\">All Professors</option>\n</select>\n\n<div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Spanish\"> Spanish</label>\n  <label><input type=\"checkbox\" value=\"English\"> English</label>\n</div>\n\n<button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">üìç Find Centers Near Me (2 km)</button>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px;\"></div>\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n## Yoga Centers\n\n<ul id=\"centerList\"></ul>\n<p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nconst checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n      findNearbyBtn.textContent = \"‚úÖ Showing Centers Near Me (2 km)\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n    updateDisplay(true, true);\n  }\n});\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  });\n\ninput.addEventListener(\"focus\", () => {\n  suggestions.innerHTML = \"\";\n  const li = document.createElement(\"li\");\n  li.textContent = \"üìç Use my location (2 km)\";\n  li.style.padding = \"5px\";\n  li.style.cursor = \"pointer\";\n  li.style.fontStyle = \"italic\";\n  li.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(li);\n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n  const nearMe = document.createElement(\"li\");\n  nearMe.textContent = \"üìç Use my location (2 km)\";\n  nearMe.style.padding = \"5px\";\n  nearMe.style.cursor = \"pointer\";\n  nearMe.style.fontStyle = \"italic\";\n  nearMe.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(nearMe);\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, false);\n      });\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n</script>\n\n -->\n","srcMarkdownNoYaml":"\n\n## Filter by City, Yoga Style, Professor, and Language\n\n<input type=\"text\" id=\"citySearch\" placeholder=\"Enter city name...\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n<ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n<div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Hatha\"> Hatha</label>\n  <label><input type=\"checkbox\" value=\"Vinyasa\"> Vinyasa</label>\n  <label><input type=\"checkbox\" value=\"Yin\"> Yin</label>\n  <label><input type=\"checkbox\" value=\"Ashtanga\"> Ashtanga</label>\n  <label><input type=\"checkbox\" value=\"Kundalini\"> Kundalini</label>\n  <label><input type=\"checkbox\" value=\"Restorative\"> Restorative</label>\n  <label><input type=\"checkbox\" value=\"Bikram\"> Bikram</label>\n</div>\n\n<select id=\"professorSelect\" style=\"width: 100%; padding: 10px; margin-bottom: 1em;\">\n  <option value=\"\">All Professors</option>\n</select>\n\n<div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Spanish\"> Spanish</label>\n  <label><input type=\"checkbox\" value=\"English\"> English</label>\n</div>\n\n<button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">üìç Find Centers Near Me (2 km)</button>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px;\"></div>\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n## Yoga Centers\n\n<ul id=\"centerList\"></ul>\n<p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nconst checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n\n  if (doZoom && usingNearby && userLat && userLng) {\n    map.setView([userLat, userLng], 14);\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n\n      // Clear city input when nearby search is activated\n      input.value = \"\";\n      findNearbyBtn.textContent = \"‚úÖ Showing Centers Near Me (2 km)\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n    updateDisplay(true, true);\n  }\n});\n\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  });\n\ninput.addEventListener(\"focus\", () => {\n  suggestions.innerHTML = \"\";\n  const li = document.createElement(\"li\");\n  li.textContent = \"üìç Use my location (2 km)\";\n  li.style.padding = \"5px\";\n  li.style.cursor = \"pointer\";\n  li.style.fontStyle = \"italic\";\n  li.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(li);\n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n  const nearMe = document.createElement(\"li\");\n  nearMe.textContent = \"üìç Use my location (2 km)\";\n  nearMe.style.padding = \"5px\";\n  nearMe.style.cursor = \"pointer\";\n  nearMe.style.fontStyle = \"italic\";\n  nearMe.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(nearMe);\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        usingNearby = false;\n        userLat = null;\n        userLng = null;\n        findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, true);\n      });\n\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n</script>\n\n\n<!-- ---\ntitle: \"Find a Yoga Center\"\n---\n\n## Filter by City, Yoga Style, Professor, and Language\n\n<input type=\"text\" id=\"citySearch\" placeholder=\"Enter city name...\" style=\"width: 100%; padding: 10px; margin-bottom: 10px;\" autocomplete=\"off\" />\n<ul id=\"citySuggestions\" style=\"list-style: none; padding: 0; margin: 0; border: 1px solid #ccc; display: none; max-height: 150px; overflow-y: auto;\"></ul>\n\n<div id=\"styleFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Hatha\"> Hatha</label>\n  <label><input type=\"checkbox\" value=\"Vinyasa\"> Vinyasa</label>\n  <label><input type=\"checkbox\" value=\"Yin\"> Yin</label>\n  <label><input type=\"checkbox\" value=\"Ashtanga\"> Ashtanga</label>\n  <label><input type=\"checkbox\" value=\"Kundalini\"> Kundalini</label>\n  <label><input type=\"checkbox\" value=\"Restorative\"> Restorative</label>\n  <label><input type=\"checkbox\" value=\"Bikram\"> Bikram</label>\n</div>\n\n<select id=\"professorSelect\" style=\"width: 100%; padding: 10px; margin-bottom: 1em;\">\n  <option value=\"\">All Professors</option>\n</select>\n\n<div id=\"languageFilters\" style=\"margin-bottom: 1em;\">\n  <label><input type=\"checkbox\" value=\"Spanish\"> Spanish</label>\n  <label><input type=\"checkbox\" value=\"English\"> English</label>\n</div>\n\n<button id=\"findNearby\" style=\"padding: 10px; width: 100%; margin-bottom: 1em;\">üìç Find Centers Near Me (2 km)</button>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px;\"></div>\n<script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\n\n## Yoga Centers\n\n<ul id=\"centerList\"></ul>\n<p id=\"noResults\" style=\"display:none; color: red;\">No centers found for your search.</p>\n\n<script>\nlet centers = [];\nlet professors = [];\nlet usingNearby = false;\nlet userLat = null;\nlet userLng = null;\n\nconst input = document.getElementById(\"citySearch\");\nconst suggestions = document.getElementById(\"citySuggestions\");\nconst checkboxes = document.querySelectorAll(\"#styleFilters input[type=checkbox]\");\nconst languageBoxes = document.querySelectorAll(\"#languageFilters input[type=checkbox]\");\nconst professorSelect = document.getElementById(\"professorSelect\");\nconst findNearbyBtn = document.getElementById(\"findNearby\");\nconst listEl = document.getElementById(\"centerList\");\nconst noResults = document.getElementById(\"noResults\");\n\nconst map = L.map('map').setView([40.0, -3.7], 6);\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n  attribution: '&copy; OpenStreetMap'\n}).addTo(map);\nlet markers = [];\n\nfunction updateDisplay(doZoom = false, updateMarkers = true) {\n  const cityVal = input.value.toLowerCase().trim();\n  const selectedStyles = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedLangs = Array.from(languageBoxes).filter(cb => cb.checked).map(cb => cb.value);\n  const selectedProf = professorSelect.value;\n\n  const filtered = centers.filter(c => {\n    const matchCity = c.city.toLowerCase().includes(cityVal);\n    const matchStyle = selectedStyles.length === 0 || c.styles.some(style => selectedStyles.includes(style));\n    const matchLang = selectedLangs.length === 0 || c.languages.some(lang => selectedLangs.includes(lang));\n    const matchProf = !selectedProf || c.professors.includes(selectedProf);\n    const matchNearby = !usingNearby || (\n      userLat !== null && userLng !== null &&\n      getDistance(userLat, userLng, c.lat, c.lng) <= 2\n    );\n    return matchNearby && matchCity && matchStyle && matchLang && matchProf;\n  });\n\n  listEl.innerHTML = \"\";\n  filtered.forEach(c => {\n    const li = document.createElement(\"li\");\n    li.innerHTML = `<a href=\"${c.page}\">${c.name} (${c.city})</a>`;\n    listEl.appendChild(li);\n  });\n\n  noResults.style.display = filtered.length === 0 ? \"block\" : \"none\";\n\n  if (updateMarkers) {\n    markers.forEach(m => map.removeLayer(m));\n    markers = [];\n    filtered.forEach(c => {\n      const marker = L.marker([c.lat, c.lng]).addTo(map)\n        .bindPopup(`<a href=\"${c.page}\">${c.name}</a><br>${c.city}`);\n      markers.push(marker);\n    });\n  }\n\n  if (doZoom && cityVal) {\n    const exactMatch = centers.filter(c => c.city.toLowerCase() === cityVal);\n    if (exactMatch.length > 0) {\n      const avgLat = exactMatch.reduce((sum, c) => sum + c.lat, 0) / exactMatch.length;\n      const avgLng = exactMatch.reduce((sum, c) => sum + c.lng, 0) / exactMatch.length;\n      map.setView([avgLat, avgLng], 12);\n    }\n  }\n}\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  const toRad = deg => deg * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng/2)**2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nfindNearbyBtn.addEventListener(\"click\", () => {\n  if (!usingNearby) {\n    if (!navigator.geolocation) {\n      alert(\"Geolocation not supported\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(pos => {\n      userLat = pos.coords.latitude;\n      userLng = pos.coords.longitude;\n      usingNearby = true;\n      findNearbyBtn.textContent = \"‚úÖ Showing Centers Near Me (2 km)\";\n      updateDisplay(true, true);\n    }, () => {\n      alert(\"Unable to get location\");\n    });\n  } else {\n    usingNearby = false;\n    userLat = null;\n    userLng = null;\n    findNearbyBtn.textContent = \"üìç Find Centers Near Me (2 km)\";\n    updateDisplay(true, true);\n  }\n});\n\nfetch(\"data/centers.json\")\n  .then(res => res.json())\n  .then(data => {\n    centers = data;\n    return fetch(\"data/professors.json\");\n  })\n  .then(res => res.json())\n  .then(data => {\n    professors = data;\n    professors.forEach(p => {\n      const option = document.createElement(\"option\");\n      option.value = p.id;\n      option.textContent = p.name;\n      professorSelect.appendChild(option);\n    });\n    updateDisplay(true, true);\n  });\n\ninput.addEventListener(\"focus\", () => {\n  suggestions.innerHTML = \"\";\n  const li = document.createElement(\"li\");\n  li.textContent = \"üìç Use my location (2 km)\";\n  li.style.padding = \"5px\";\n  li.style.cursor = \"pointer\";\n  li.style.fontStyle = \"italic\";\n  li.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(li);\n  suggestions.style.display = \"block\";\n});\n\ndocument.addEventListener(\"click\", (e) => {\n  if (!input.contains(e.target) && !suggestions.contains(e.target)) {\n    suggestions.style.display = \"none\";\n  }\n});\n\ninput.addEventListener(\"input\", () => {\n  const val = input.value.toLowerCase().trim();\n  suggestions.innerHTML = \"\";\n\n  const nearMe = document.createElement(\"li\");\n  nearMe.textContent = \"üìç Use my location (2 km)\";\n  nearMe.style.padding = \"5px\";\n  nearMe.style.cursor = \"pointer\";\n  nearMe.style.fontStyle = \"italic\";\n  nearMe.addEventListener(\"click\", () => {\n    suggestions.style.display = \"none\";\n    findNearbyBtn.click();\n  });\n  suggestions.appendChild(nearMe);\n\n  if (val.length === 0) {\n    suggestions.style.display = \"block\";\n    return;\n  }\n\n  const allCities = [...new Set(centers.map(c => c.city))];\n  const matches = allCities.filter(c => c.toLowerCase().startsWith(val));\n  if (matches.length > 0) {\n    matches.forEach(city => {\n      const li = document.createElement(\"li\");\n      li.textContent = city;\n      li.style.padding = \"5px\";\n      li.style.cursor = \"pointer\";\n      li.addEventListener(\"click\", () => {\n        input.value = city;\n        suggestions.style.display = \"none\";\n        updateDisplay(true, false);\n      });\n      suggestions.appendChild(li);\n    });\n    suggestions.style.display = \"block\";\n  }\n});\n\ncheckboxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nlanguageBoxes.forEach(cb => cb.addEventListener(\"change\", () => updateDisplay(false, true)));\nprofessorSelect.addEventListener(\"change\", () => updateDisplay(false, true));\n</script>\n\n -->\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"map.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","resources":["data/centers.json","data/professors.json"],"theme":"flatly","title":"Find a Yoga Center"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}